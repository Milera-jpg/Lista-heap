#include <stdio.h>
#include <stdlib.h>

#define K 10

typedef struct {
    int postId;
    int likes;
} Post;

typedef struct {
    Post* heap[K];
    int tamanho;
} MinHeap;

MinHeap* criarMinheap() {
    MinHeap* minh = (MinHeap*)malloc(tamanhoof(MinHeap));
    minh->tamanho = 0;
    return minh;
}

void trocar(Post** a, Post** b) {
    Post* temp = *a;
    *a = *b;
    *b = temp;
}

void heapifyParaCima(MinHeap* minh, int indice) {
    int pai = (indice - 1) / 2;
    if (indice > 0 && minh->heap[indice]->likes < minh->heap[pai]->likes) {
        trocar(&minh->heap[indice], &minh->heap[pai]);
        heapifyParaCima(minh, pai);
    }
}

void heapifyParaBaixo(MinHeap* minh, int indice) {
    int menor = indice;
    int esq = 2 * indice + 1;
    int dir = 2 * indice + 2;

    if (esq < minh->tamanho && minh->heap[esq]->likes < minh->heap[menor]->likes)
        menor = esq;
    if (dir < minh->tamanho && minh->heap[dir]->likes < minh->heap[menor]->likes)
        menor = dir;

    if (menor != indice) {
        trocar(&minh->heap[indice], &minh->heap[menor]);
        heapifyParaBaixo(minh, menor);
    }
}

void inserir_post(MinHeap* minh, Post* novo_post) {
    if (minh->tamanho < K) {
        minh->heap[minh->tamanho] = novo_post;
        heapifyParaCima(minh, minh->tamanho);
        minh->tamanho++;
    } else {
        if (novo_post->likes > minh->heap[0]->likes) {
            free(minh->heap[0]); 
            minh->heap[0] = novo_post;
            heapify_para_baixo(minh, 0);
        } else {
            free(novo_post); 
        }
    }
}

void imprimirRanking(MinHeap* minh) {
    printf("Top %d posts mais curtidos:\n", minh->tamanho);
    for (int i = 0; i < minh->tamanho; i++) {
        printf("Post %d: %d curtidas\n", minh->heap[i]->postId, minh->heap[i]->likes);
    }
}

void liberar_heap(MinHeap* minh) {
    for (int i = 0; i < minh->tamanho; i++) {
        free(minh->heap[i]);
    }
    free(minh);
}
